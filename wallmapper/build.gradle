apply plugin: 'com.android.application'

apply plugin: 'kotlin-android'

apply plugin: 'kotlin-android-extensions'

android {
    compileSdkVersion 28
    def newVersionCode = getVersionCode()
    defaultConfig {
        applicationId "labs.lucka.wallmapper"
        minSdkVersion 23
        targetSdkVersion 28
        versionCode newVersionCode
        versionName "0.1.9"
    }

    buildTypes {
        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility = 1.8
        targetCompatibility = 1.8
    }

    kotlinOptions {
        jvmTarget = "1.8"
    }

    applicationVariants.all { variant ->
        variant.outputs.all {
            outputFileName = "${archivesBaseName}-${variant.name}-${variant.versionName}.apk"
        }
    }

}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'androidx.core:core-ktx:1.2.0-alpha04'
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    implementation 'com.google.android.material:material:1.1.0-alpha10'
    implementation 'androidx.preference:preference-ktx:1.1.0'
    // Mapbox
    implementation 'com.mapbox.mapboxsdk:mapbox-android-sdk:8.4.0'
    // Anko
    implementation "org.jetbrains.anko:anko:$anko_version"
    // Gson
    implementation 'com.google.code.gson:gson:2.8.5'
}

def getVersionCode() {
    def versionFile = file('version.properties')
    if (versionFile.canRead()) {
        def versionProps = new Properties()
        versionProps.load(new FileInputStream(versionFile))
        def versionCode = versionProps['VERSION_CODE'].toInteger()
        versionProps['VERSION_CODE'] = (++versionCode).toString()
        versionProps.store(versionFile.newWriter(), null)
        return versionCode
    } else {
        throw new GradleException("Could not find version.properties!")
    }
}